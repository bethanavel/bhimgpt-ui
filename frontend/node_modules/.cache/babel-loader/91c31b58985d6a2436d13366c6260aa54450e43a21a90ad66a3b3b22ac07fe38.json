{"ast":null,"code":"var _jsxFileName = \"/Users/bethanavel/Documents/Personal/bhimGPT/anand_ui2/bhimgpt-ui/frontend/src/components/Chat/chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Container, Sidebar, ChatBox, MessagesContainer, Message, InputContainer, Input, SendButton, SidebarItem, NewChatButton } from './chat.styles';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const [chats, setChats] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [user, setUser] = useState(null);\n  const [selectedChatId, setSelectedChatId] = useState(null);\n  const [loading, setLoading] = useState(false); // Loader state\n  const navigate = useNavigate();\n\n  // Fetch AI Response\n  const fetchChatResponse = async (question, chatHistory) => {\n    try {\n      setLoading(true);\n      // Format chat history to match Flask server expectations\n      const formattedHistory = chatHistory.map(msg => ({\n        type: msg.role,\n        // 'human' or 'ai'\n        content: msg.content\n      }));\n      // Call Flask server using axios\n      const response = await axios.post(\"http://localhost:5001/chat\", {\n        question,\n        chat_history: formattedHistory\n      });\n\n      // const response = await fetch(\"http://localhost:5000/api/chat/chatResponse\", {\n      //   method: \"POST\",\n      //   headers: { \"Content-Type\": \"application/json\" },\n      //   body: JSON.stringify({ question, chat_history: chatHistory })\n      // });\n      // const data = await response.json();\n      setLoading(false);\n      //   return data;\n      // } catch (error) {\n      //   console.error(\"Error fetching response:\", error);\n      //   setLoading(false);\n      //   return { error: \"Server error\" };\n      // }\n      const {\n        answer,\n        sources\n      } = response.data;\n      if (answer) {\n        return {\n          answer,\n          sources: sources || []\n        };\n      } else {\n        console.error(\"Unexpected response format:\", response.data);\n        return {\n          error: \"Unexpected response format\"\n        };\n      }\n    } catch (error) {\n      console.error(\"Error fetching response:\", error);\n      setLoading(false);\n      return {\n        error: error.message || \"Server error\"\n      };\n    }\n  };\n\n  // Save Chat Message\n  const saveMessage = async (userMessage, aiMessage) => {\n    try {\n      await axios.post(\"http://localhost:5000/api/chat/save\", {\n        userId: user._id,\n        message: userMessage,\n        aiResponse: aiMessage\n      });\n    } catch (error) {\n      console.error(\"Error saving message:\", error);\n    }\n  };\n  const fetchChats = async () => {\n    if (!user) return;\n    try {\n      const res = await axios.get(`http://localhost:5000/api/chat/${user._id}`);\n      setChats(res.data);\n    } catch (error) {\n      console.error(\"Error fetching chats:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchChats();\n  }, [user]);\n  useEffect(() => {\n    const storedUser = localStorage.getItem(\"user\");\n    if (!storedUser) {\n      navigate(\"/login\");\n      return;\n    }\n    setUser(JSON.parse(storedUser));\n  }, []);\n  const loadChat = async chatId => {\n    setSelectedChatId(chatId);\n    const res = await axios.get(`http://localhost:5000/api/chat/${user._id}/${chatId}`);\n    setMessages(res.data);\n  };\n\n  // Handle Send Message Flow\n  const handleSendMessage = async () => {\n    if (!input.trim()) return;\n    const userMessage = {\n      role: \"human\",\n      content: input\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]); // Show user's message instantly\n    setInput(\"\"); // Clear input field\n\n    // Fetch AI Response\n    const response = await fetchChatResponse(input, messages);\n    if (response.error) return; // Stop if there's an error\n\n    const aiMessage = {\n      role: \"ai\",\n      content: response.answer\n    };\n    setMessages(prevMessages => [...prevMessages, aiMessage]); // Show AI response\n\n    // Save Messages after AI responds\n    await saveMessage(userMessage.content, aiMessage.content);\n    fetchChats();\n  };\n  const startNewChat = () => {\n    setSelectedChatId(null);\n    setMessages([]);\n  };\n  const groupedChats = {\n    Today: [],\n    \"Last 7 Days\": [],\n    \"Last 30 Days\": [],\n    Older: []\n  };\n  chats.forEach(chat => {\n    const daysAgo = (Date.now() - new Date(chat.createdAt)) / (1000 * 60 * 60 * 24);\n    if (daysAgo < 1) groupedChats.Today.push(chat);else if (daysAgo < 7) groupedChats[\"Last 7 Days\"].push(chat);else if (daysAgo < 30) groupedChats[\"Last 30 Days\"].push(chat);else groupedChats.Older.push(chat);\n  });\n  return user ? /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      children: [/*#__PURE__*/_jsxDEV(NewChatButton, {\n        onClick: startNewChat,\n        children: \"+ New Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), Object.entries(groupedChats).map(([label, chats]) => chats.length > 0 && chats.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt)) && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 15\n        }, this), chats.map(chat => /*#__PURE__*/_jsxDEV(SidebarItem, {\n          onClick: () => loadChat(chat._id),\n          children: chat.title\n        }, chat._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 17\n        }, this))]\n      }, label, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatBox, {\n      children: [/*#__PURE__*/_jsxDEV(MessagesContainer, {\n        children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(Message, {\n          isbot: msg.role === \"ai\" ? \"true\" : \"false\",\n          children: msg.content\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 13\n        }, this)), loading && /*#__PURE__*/_jsxDEV(CircularProgress, {\n          size: 24,\n          style: {\n            margin: \"10px auto\",\n            display: \"block\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputContainer, {\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          type: \"text\",\n          className: \"chat-box\",\n          value: input,\n          onChange: e => setInput(e.target.value),\n          placeholder: \"Type a message...\",\n          disabled: loading // Disable input while loading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SendButton, {\n          onClick: handleSendMessage,\n          disabled: loading,\n          children: loading ? \"Loading...\" : \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 7\n  }, this);\n};\n_s(Chat, \"t3f39ytwDNhNv/l4jT2v2i1uRoE=\", false, function () {\n  return [useNavigate];\n});\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","axios","useNavigate","Container","Sidebar","ChatBox","MessagesContainer","Message","InputContainer","Input","SendButton","SidebarItem","NewChatButton","CircularProgress","jsxDEV","_jsxDEV","Chat","_s","chats","setChats","messages","setMessages","input","setInput","user","setUser","selectedChatId","setSelectedChatId","loading","setLoading","navigate","fetchChatResponse","question","chatHistory","formattedHistory","map","msg","type","role","content","response","post","chat_history","answer","sources","data","console","error","message","saveMessage","userMessage","aiMessage","userId","_id","aiResponse","fetchChats","res","get","storedUser","localStorage","getItem","JSON","parse","loadChat","chatId","handleSendMessage","trim","prevMessages","startNewChat","groupedChats","Today","Older","forEach","chat","daysAgo","Date","now","createdAt","push","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","Object","entries","label","length","sort","a","b","title","index","isbot","size","style","margin","display","className","value","onChange","e","target","placeholder","disabled","_c","$RefreshReg$"],"sources":["/Users/bethanavel/Documents/Personal/bhimGPT/anand_ui2/bhimgpt-ui/frontend/src/components/Chat/chat.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n  Container, Sidebar, ChatBox, MessagesContainer,\n  Message, InputContainer, Input, SendButton, SidebarItem, NewChatButton\n} from './chat.styles';\nimport CircularProgress from '@mui/material/CircularProgress';\n\nconst Chat = () => {\n  const [chats, setChats] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [user, setUser] = useState(null);\n  const [selectedChatId, setSelectedChatId] = useState(null);\n  const [loading, setLoading] = useState(false); // Loader state\n  const navigate = useNavigate();\n\n  // Fetch AI Response\n  const fetchChatResponse = async (question, chatHistory) => {\n    try {\n      setLoading(true);\n      // Format chat history to match Flask server expectations\n      const formattedHistory = chatHistory.map(msg => ({\n        type: msg.role,  // 'human' or 'ai'\n        content: msg.content\n      }));\n      // Call Flask server using axios\n      const response = await axios.post(\"http://localhost:5001/chat\", {\n        question,\n        chat_history: formattedHistory\n      });\n\n      // const response = await fetch(\"http://localhost:5000/api/chat/chatResponse\", {\n      //   method: \"POST\",\n      //   headers: { \"Content-Type\": \"application/json\" },\n      //   body: JSON.stringify({ question, chat_history: chatHistory })\n      // });\n      // const data = await response.json();\n      setLoading(false);\n    //   return data;\n    // } catch (error) {\n    //   console.error(\"Error fetching response:\", error);\n    //   setLoading(false);\n    //   return { error: \"Server error\" };\n    // }\n    const { answer, sources } = response.data;\n      if (answer) {\n        return { answer, sources: sources || [] };\n      } else {\n        console.error(\"Unexpected response format:\", response.data);\n        return { error: \"Unexpected response format\" };\n      }\n    } catch (error) {\n      console.error(\"Error fetching response:\", error);\n      setLoading(false);\n      return { error: error.message || \"Server error\" };\n    }\n  };\n\n  // Save Chat Message\n  const saveMessage = async (userMessage, aiMessage) => {\n    try {\n      await axios.post(\"http://localhost:5000/api/chat/save\", {\n        userId: user._id,\n        message: userMessage,\n        aiResponse: aiMessage,\n      });\n    } catch (error) {\n      console.error(\"Error saving message:\", error);\n    }\n  };\n\n  const fetchChats = async () => {\n    if (!user) return;\n    try {\n      const res = await axios.get(`http://localhost:5000/api/chat/${user._id}`);\n      setChats(res.data);\n    } catch (error) {\n      console.error(\"Error fetching chats:\", error);\n    }\n  };\n  \n  useEffect(() => {\n    fetchChats();\n  }, [user]);\n\n  useEffect(() => {\n    const storedUser = localStorage.getItem(\"user\");\n    if (!storedUser) {\n      navigate(\"/login\");\n      return;\n    }\n    setUser(JSON.parse(storedUser));\n  }, []);\n\n  const loadChat = async (chatId) => {\n    setSelectedChatId(chatId);\n    const res = await axios.get(`http://localhost:5000/api/chat/${user._id}/${chatId}`);\n    setMessages(res.data);\n  };\n\n  // Handle Send Message Flow\n  const handleSendMessage = async () => {\n    if (!input.trim()) return;\n\n    const userMessage = { role: \"human\", content: input };\n    setMessages(prevMessages => [...prevMessages, userMessage]); // Show user's message instantly\n    setInput(\"\"); // Clear input field\n\n    // Fetch AI Response\n    const response = await fetchChatResponse(input, messages);\n    if (response.error) return; // Stop if there's an error\n\n    const aiMessage = { role: \"ai\", content: response.answer };\n    setMessages(prevMessages => [...prevMessages, aiMessage]); // Show AI response\n\n    // Save Messages after AI responds\n    await saveMessage(userMessage.content, aiMessage.content);\n    fetchChats();\n  };\n\n  const startNewChat = () => {\n    setSelectedChatId(null);\n    setMessages([]);\n  };\n\n  const groupedChats = {\n    Today: [],\n    \"Last 7 Days\": [],\n    \"Last 30 Days\": [],\n    Older: [],\n  };\n\n  chats.forEach((chat) => {\n    const daysAgo = (Date.now() - new Date(chat.createdAt)) / (1000 * 60 * 60 * 24);\n    if (daysAgo < 1) groupedChats.Today.push(chat);\n    else if (daysAgo < 7) groupedChats[\"Last 7 Days\"].push(chat);\n    else if (daysAgo < 30) groupedChats[\"Last 30 Days\"].push(chat);\n    else groupedChats.Older.push(chat);\n  });\n\n  return user ? (\n    <Container>\n      <Sidebar>\n        <NewChatButton onClick={startNewChat}>+ New Chat</NewChatButton>\n        {Object.entries(groupedChats).map(([label, chats]) =>\n          chats.length > 0 && chats.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt)) && (\n            <div key={label}>\n              <h4>{label}</h4>\n              {chats.map((chat) => (\n                <SidebarItem key={chat._id} onClick={() => loadChat(chat._id)}>\n                  {chat.title}\n                </SidebarItem>\n              ))}\n            </div>\n          )\n        )}\n      </Sidebar>\n\n      <ChatBox>\n        <MessagesContainer>\n          {messages.map((msg, index) => (\n            <Message key={index} isbot={msg.role === \"ai\" ? \"true\" : \"false\"}>{msg.content}</Message>\n          ))}\n          {loading && <CircularProgress size={24} style={{ margin: \"10px auto\", display: \"block\" }} />}\n        </MessagesContainer>\n\n        <InputContainer>\n          <Input\n            type=\"text\"\n            className=\"chat-box\"\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            placeholder=\"Type a message...\"\n            disabled={loading} // Disable input while loading\n          />\n          <SendButton onClick={handleSendMessage} disabled={loading}>\n            {loading ? \"Loading...\" : \"Send\"}\n          </SendButton>\n        </InputContainer>\n      </ChatBox>\n    </Container>\n  ) : <p>Loading...</p>;\n};\n\nexport default Chat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}